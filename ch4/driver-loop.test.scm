;; run gosh -l./my-evaluator-3.scm driver-loop.test.scm
(define the-global-environment (setup-environment))
(define (eval-assert test expected expr message)
  (let ((actual (eval expr the-global-environment)))
    (if (test actual expected)
	(begin (display "OK") (newline))
	(error #"FAILS: ~|message|"))))
(define (eval-true expr message)
  (eval-assert eq? #t expr message))
(define (eval-false expr message)
  (eval-assert eq? #f expr message))

(eval '(define (tak x y z)
	 (if (call > x y)
	     (call tak
		   (call tak (call - x 1) y z)
		   (call tak (call - y 1) z x)
		   (call tak (call - z 1) x y))
	     y))
      the-global-environment)
;; (eval '(call tak 12 6 0) the-global-environment)

(eval '(define (ack m n)
	 (cond ((call = m 0)
		(call + n 1))
	       ((call = n 0)
		(call ack (call - m 1) 1))
	       (else
		(call ack (call - m 1)
		      (call ack m
			    (call - n 1))))))
      the-global-environment)
(display (eval '(call ack 4 1) the-global-environment))

(eval '(define (f x) (call + x 1)) the-global-environment)
(eval '(define a (call f 1)) the-global-environment)
(eval '(define b (call + a 1)) the-global-environment)

(eval-assert = 11 '(call f 10) "function call")
(eval-assert = 2 'a "defining a global value")
(eval-assert = 3 'b "defining a global value using another var")

(eval '(define a 10) the-global-environment)
(eval-assert = 10 'a "redefining a global value")

(eval '(define (g x)
	 (define u 90)
	 (define v 900)
	 (call + u v x))
      the-global-environment)
(eval-assert = 999 '(call g 9) "inner definition")

(eval '(define (h x)
	 (define (even? n)
	   (if (call = n 0) true (call odd? (call - n 1))))
	 (define (odd? n)
	   (if (call = n 0) false (call even? (call - n 1))))
	 (call even? x))
      the-global-environment)
(eval-true '(call h 10) "inner definition 2")
